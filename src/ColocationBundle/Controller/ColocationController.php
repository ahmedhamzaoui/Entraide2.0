<?php

namespace ColocationBundle\Controller;

use ColocationBundle\Entity\Colocation;
use ColocationBundle\Form\ChercherType;
use ColocationBundle\Form\ColocationType;
use ColocationBundle\Form\ModifierType;
use ColocationBundle\Form\RatingColocationType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

class ColocationController extends Controller
{
    public function addAction(Request $request)
    {
        $colocation=new Colocation();
        $form=$this->createForm(ColocationType::class,$colocation);
        $form->handleRequest($request);
        $em=$this->getDoctrine()->getManager();
        if($form->isSubmitted() )
        {

            $file = $colocation->getPhoto();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            $file->move(
                $this->getParameter('images_directory'),
                $fileName);


            $colocation->setPhoto($fileName);
            $colocation->setNbrrating(0);
            $colocation->setRaiting(0);
            $colocation->setNbruser(0);
            $colocation->setIdUser($this->getUser());

            $em->persist($colocation);
            $em->flush();
            return $this->redirectToRoute('colocation_chercher');
        }


        return $this->render('ColocationBundle:Colocation:ajoutColocation.html.twig',
            array('c' => $form->createView()));
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    public function getTargetDirectory()
    {
        return $this->targetDirectory;
    }
    public function findAdresseAction(Request $request)
    {
        $colocation = new Colocation();
        $ad=$request->get('adresse');
        $colocation->setAdresse($ad);
        $prMin=$request->get('prixMin');
        $prMax=$request->get('prixMax');
        $colocation->setPrix($prMin);
        $colocation->setPrix($prMax);
        if ($request->isMethod('POST')) {
            if ($ad != null) {

                $colocations = $this->getDoctrine()->getRepository('ColocationBundle:Colocation')
                    ->findByAd($colocation->getAdresse());
                if ($request->isMethod('POST')) {
                    if ($prMin != null && $prMax != null) {
                        $colocations = $this->getDoctrine()->getRepository('ColocationBundle:Colocation')
                            ->findByp($prMin, $prMax);

                        return $this->render('ColocationBundle:Colocation:list.html.twig', array(
                            'colocations' => $colocations
                        ));
                    }
                }

                return $this->render('ColocationBundle:Colocation:list.html.twig', array(
                    'colocations' => $colocations
                ));

            } elseif ($ad == null) {
                $colocations = $this->getDoctrine()->getRepository('ColocationBundle:Colocation')->findBy(array('valid'=>array(1)));
                if ($request->isMethod('POST')) {
                    if ($prMin != null && $prMax != null) {
                        $colocations = $this->getDoctrine()->getRepository('ColocationBundle:Colocation')
                            ->findByp($prMin, $prMax);

                        return $this->render('ColocationBundle:Colocation:list.html.twig', array(
                            'colocations' => $colocations
                        ));
                    }
                }

                return $this->render('ColocationBundle:Colocation:list.html.twig', array(
                    'colocations' => $colocations));

            }


            }



       // return http_redirect('/purge');
        //return $this->redirectToRoute('colocation_purge');
        return $this->render('ColocationBundle:Colocation:ChercherColocation.html.twig');

        //return new Response("abcd");

    }

  /*   public function findByprixAction(Request $request)
      {
          $colocation = new Colocation();
          $colocation->setPrix($request->get('prixMin'));
          $colocation->setPrix($request->get('prixMax'));


          if($colocation->getPrix() != null) {
              $colocations = $this->getDoctrine()->getRepository('ColocationBundle:Colocation')
                  ->findByp($request->get('prixMin'),$request->get('prixMax'));
          }
              return $this->render('ColocationBundle:Colocation:list.html.twig', array(
                  'colocations'=>$colocations
              ));
          }*/

    public function affMesAnnAction()
    {

        $user=$this->getUser()->getId();
        $em = $this->getDoctrine()->getManager();
        $colocations = $em->getRepository('ColocationBundle:Colocation')->findBy(array('idUser'=>$user,'valid'=>array(1)));
        return $this->render('ColocationBundle:Colocation:MesAnnonces.html.twig', array(
            'colocations'=>$colocations
        ));
    }


    public function afficheAction($id)
    {

        $em = $this->getDoctrine()->getManager();
        $colocations = $em->getRepository('ColocationBundle:Colocation')->findBy(array('id'=>$id,'valid'=>array(1)));
        return $this->render('ColocationBundle:Colocation:affiche.html.twig', array(
            'colocations'=>$colocations
        ));
    }
    public function affAdminAction()
    {

        $em = $this->getDoctrine()->getManager();
        $colocations = $em->getRepository('ColocationBundle:Colocation')->findBy(array('valid'=>array(NULL)));
        return $this->render('ColocationBundle:Colocation:affiche.html.twig', array(
            'add'=>$colocations
        ));
    }
    public function modifAction(Request $request, $id)
    {
        $em = $this->getDoctrine()->getManager();
        $colocation = $em->getRepository('ColocationBundle:Colocation')->find($id);
        $form = $this->createForm(ModifierType::class, $colocation);
        $form->handleRequest($request);
        if ($form->isValid()) {




            $em->persist($colocation);
            $em->flush();
            // return $this->redirectToRoute('colocation_affiche_mesAnnonces');
        }
        return $this->render('ColocationBundle:Colocation:modif.html.twig', array(
            'c' => $form->createView()));

    }
    public function supprimerAction($id)
    {        $em = $this->getDoctrine()->getManager();
        $colocation = $this->getDoctrine()
            ->getRepository('ColocationBundle:Colocation')
            ->find($id);
        $res = $this->getDoctrine()
            ->getRepository('ColocationBundle:Reservationcolocation')
            ->findBy(array('idColocation'=>$id,'valid'=>array(1)));
        foreach ($res as $b ){
            $em->remove($b);
            $em->flush();
        }

        $em->remove($colocation);
        $em->flush();
        return $this->redirectToRoute('colocation_affiche_mesAnnonces');

    }
    public function findAjaxAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $colocations = $this->getDoctrine()->getRepository('ColocationBundle:Colocation')->findAll();
        if ($request->isXmlHttpRequest()) {
            $ses=$request->get('s');
            $colocations=$em->getRepository("ColocationBundle:Colocation")->rechercheAjax($ses);
            $serializer = new Serializer(array(new ObjectNormalizer()));
            $result = $serializer->normalize($colocations);
            return new JsonResponse($result);
        }
        return $this->render('ColocationBundle:Colocation:list.html.twig', array(
            'colocations' => $colocations
        ));
    }

    public function ratingAction(Request $request, $id) {
        $em= $this->getDoctrine()->getManager();
        $colocation = $em->getRepository('ColocationBundle:Colocation')->find($id);
        $r=$colocation->getNbrrating();
        $form = $this->createForm(RatingColocationType::class, $colocation);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            $colocation->setNbruser($colocation->getNbruser()+1);
            $colocation->setNbrrating($colocation->getRaiting()+$r);
            $a=($form['raiting']->getData()+$r)/$colocation->getNbruser();
            $colocation->setRaiting($a);
            $em->persist($colocation);
            $em->flush();
            return $this->redirectToRoute("colocation_list");

        }

        return $this->render('ColocationBundle:Colocation:rating.html.twig',
            array('c' => $form->createView()));
    }

    public function validerAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $colocations = $em->getRepository('ColocationBundle:Colocation')->findBy(array('valid'=>array(NULL)));

        $colocation=$this->getDoctrine()
            ->getRepository('ColocationBundle:Colocation')
            ->find($id);
        $colocation->setValid("1");
        $em=$this->getDoctrine()->getManager();
        $em->persist($colocation);
        $em->flush();
        return $this->render('ColocationBundle:Colocation:affiche.html.twig',array('add'=>$colocations));
    }


}
